# XML (eXtensible Markup Language)
# We can either use the SAX (Simple API for XML) or DOM (Document Object Model) module 
#     Use SAX when you have very limited memory because it never loads the full XML file into the RAM, unlike DOM
#         Especially useful when you have VERY large XML files or VERY limited memory 
#         You can't manipulate anything in the XML file ; you can only read it

import xml.sax

# We need a content handler that handles the XML file and then we need a parser that translates the file from XML to python script
#handler = xml.sax.ContentHandler()
#    In order to customize/override the ContentHandler() class, we are going to make a new class
print("SAX")
class GroupHandler(xml.sax.ContentHandler):
    
    def startElement(self, name, attrs): # Passing over element start ; <person id = '1'>
        # print(name) goes though every single node and prints the node name
        self.current = name
        if self.current == "person":
            print("----_PERSON-----")
            print(f"ID: {attrs['id']}")

    def characters(self, content): # Passing over text in element ; Sara Jones
        if self.current == "name":
            self.name = content
        elif self.current == "age":
            self.age = content
        elif self.current == "weight":
            self.weight = content
        elif self.current == "height":
            self.height = content
    
    def endElement(self,name): # Passing over element end ; </person>
        if self.current == "name":
            print(f"Name: {self.name}")
        elif self.current == "age":
            print(f"Age: {self.age}")
        elif self.current == "weight":
            print(f"Weight: {self.weight}")
        elif self.current == "height":
            print(f"Height: {self.height}")
        self.current = ""

handler = GroupHandler()
parser =  xml.sax.make_parser()
parser.setContentHandler(handler) # Associates the parser with the "GroupHandler" class
#    Events generated by the parser will be handled by the methods in 'GroupHandler'
parser.parse('data.xml') # parses through the XML data and call the appropriate methods in 'GroupHandler' based on the events it encounters




import xml.dom.minidom
print("DOM")
# DOM views file as a tree, each tag is treated like a branch
domtree = xml.dom.minidom.parse('data.xml') # parses the entire XML file into our script and XML tree is loaded into RAM
group = domtree.documentElement # Gets the root element of XML tree, which is "group"
persons = group.getElementsByTagName('person') # Gets list of all "person" elements 
for person in persons:
    print("-----PERSON-----")
    if person.hasAttribute('id'):
        print(f"ID: {person.getAttribute('id')}")
    print(f"Name: {person.getElementsByTagName('name')[0].childNodes[0].data}")
    print(f"Age: {person.getElementsByTagName('age')[0].childNodes[0].data}")
    print(f"Weight: {person.getElementsByTagName('weight')[0].childNodes[0].data}")
    print(f"Height: {person.getElementsByTagName('height')[0].childNodes[0].data}")

# Changing element data
persons[2].getElementsByTagName('name')[0].childNodes[0].nodeValue = "New Name" # changes the file within RAM memory 
persons[0].setAttribute('id', '100')
persons[3].getElementsByTagName('age')[0].childNodes[0].nodeValue = "-10"
domtree.writexml(open('data.xml','w')) # analogous to conn.commit()

# How to create and add new elements into XML file
'''
newperson = domtree.createElement('person')
newperson.setAttribute('id', '6')

name = domtree.createElement('name')
name.appendChild(domtree.createTextNode('Paul Green'))

age = domtree.createElement('age')
age.appendChild(domtree.createTextNode('19'))

weight = domtree.createElement('weight')
weight.appendChild(domtree.createTextNode('80'))

height = domtree.createElement('height')
height.appendChild(domtree.createTextNode('179'))

newperson.appendChild(name)
newperson.appendChild(age)
newperson.appendChild(weight)
newperson.appendChild(height)

group.appendChild(newperson)

domtree.writexml(open('data.xml', 'w'))
'''